to do:
* font measuring gives incorrect width
* repaint region
* drawing spaces and nulls
* building project

editor:
* readonly mode
* run last command, command history
* delete to start/end of line
* go to matching brace
* cycle documents in most recently used order
* copy/delete lines
* change case
* parse build output for errors
* undo/redo
* find/replace regex, backwards, match word/case
* find/replace in files
* config file, customizable build command and key mappings
configurable font and text size
* selection with mouse/arrows and highlighting
* line wrapping
* run macro n times, run macro on selection
* graphical user interface
linux and macos version
blinking cursor
* move to prev/next paragraph
* quick open for files in current directory
* preserve console output when exiting
* many ctrl and alt combinations don't work in Linux console
* clipboard integration on macos
* support wildecards in file names on windows
* syntax highlighting improvements
improved handling of highlighting corner cases
improved document type detection with shebang
support for other languages
cache highlighting info
document type override
* autocomplete improvements
complete longest
give nearby words higher priority
scan all documents in current directory
more efficient data structure
optimize rebuilding of word database
autocomplete for file names
* performance improvements
open large files in native encoding
turn off indexing and syntax highlighting for large files
use memory mapping and on demand/background loading
group small insert/delete changes and apply together
store text as a list of lines/blocks
redraw as few characters as possible instead of enitre screen
handle multiple input events in GUI mode

foundation:
* international support
locales (formatting, string compare/search/case conversion)
encoding conversion
handle invalid Unicode sequences
* containers
initializer_list support
conversion between containers (array to list etc)
create element in place
move node pointers instead of nodes when rehashing to avoid allocation
benchmark/improve hash function
append for Array? merge Buffer and Array?
* strings
use USC-2 for all strings?
charAt/charForward as one call
string constructor that accepts ascii strings
store short strings in place
split/join, tokenizer
conversion to binary/hex
simple parsing a la scanf
simple regular expressions
type safe string formatting
* log memory allocations
* convert any object to string
* memory mapped I/O, file system access
* date and time
* threads/atomics/async
* function objects (function/bind)
* type traits
* alpha and floating point color

misc:
* create public web page
* minimal rebuild, precompiled headers, multiple targets
* split foundation into a library
* run release version in profiler, memory/thread checker
* don't use asserts in low level OS specific code
* get newer versions of solaris/aix compilers
* support intel compiler, linux on arm and bsd
